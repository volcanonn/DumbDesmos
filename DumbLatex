import re

def FindParenthesis(input: str):
    s = input.find(r"\left(")
    while s != -1:
        ParenStart = s
        ParenCount = 0
        while True:
            lefts = input.find(r"\left(",s)
            rights = input.find(r"\right)",s)
            #print(lefts,rights)
            s = min(lefts,rights,key=lambda x: x if x != -1 else 99999)
            if s == lefts:
                #print("found left")
                ParenCount += 1 
            else:
                #print("found rights")
                ParenCount -= 1
            #print(ParenCount)
            #print("~~~~~~~~~~~~~~~")
            if ParenCount == 0:
                break
            s += 1
        InnerPeren = input[ParenStart+6:s]
        input = input.replace(InnerPeren,str(CalcLatex(InnerPeren))) # might need to be replace by removing the text and adding the new value in like input = input[:ParenStart] + str(CalcLatex(input[ParenStart+6:s])) + input[-s:]
        s = input.find(r"\left(")
    return input

def TokenizeInput(input: str, index: int = 0, tokenlist: list = []):
    substring = ""
    while True:
        substring += input[index]
        if re.fullmatch(r'\d+[+-\\]',substring): # Look for numbers 5.23242 
            tokenlist.append(float(substring[:-1]))
            substring = ""
            continue
        elif re.fullmatch(r'[+-^]{1}',substring): # Look for simple tokens + or - or ^
            tokenlist.append(substring)
            substring = ""
        elif re.fullmatch(r'\\\w+[\\ \{]',substring): # Look for work function \cdot
            tokenlist.append(substring[:-1])
            substring = ""
            continue
        elif substring == '{': # Find curly start
            tokenlist.append(TokenizeInput(input,index+1,tokenlist))
        elif substring == '}': # Curly end
            print("returning tokenlist", input, tokenlist)
            return tokenlist
        index += 1
        if index == len(input)-1:
            print("done finding tokens", input)
            return tokenlist

def DoMath(tokenlist: list):
    # PEMD
    #look for rrys
    for token in tokenlist: # Exponents

    for token in tokenlist: # Mult Div

    for token in tokenlist: # Plus Sub

    


def CalcLatex(input: str):
    # Look for perentheseseses
    #5+3\cdot\frac{1}{x}\cdot\frac{1}{x}\cdot\sqrt{\frac{1}{x}}\cdot8+3\cdot5^{3}+8^{2+3}
    #4\cdot t
    input = FindParenthesis(input)
    
    input = TokenizeInput(input)
    
    input = DoMath(input)

    return input
    # turn this 5+3\cdot\frac{1}{x}\cdot\frac{1}{x}\cdot\sqrt{\frac{1}{x}}\cdot8+3\cdot5^{3}+8^{2+3}
    # ? could be sqrt or maybe we can just use words
    # Words is prob better
    #splitt up as each item like this [5,"+",3,"*",["/",[1],["x"]],"*","sqrt", ["/", [1], ["x"]], "*", 8, "+", 3, "*", 5, "^", [3]]
    # and then clean up the lists inside of lists with a CalcLatex recursion AGAIN.
    # to clean up to [5,"+",3,"*","/",1,"x","*","sqrt", "1/x", "*", 8, "+", 3, "*", 5, "^", 3]
    # I guess the 1/x means that i cant reuse a equation just with it simplified like that cause that would be to complicated to keep the 1/x as a piece because the whole point is that it just become a single value... Or not
    # And then i go through pemdas style looking for ^ first and doing it to the previous thing and the one afterwords. Going all the way through with 3 while loops for each part left to right until its a final number
    # I also might need some stuff for nonspecified multiplicated examples 4a becoming [4, "*", "a"] and 4\left(3\right) becoming [4, "*", 3] this wont work with my parenthesis thing. Unless i turn parenthesis into arrays and then go through those
    # or maybe i could add the "\cdot" by detecting it which might work better with like a regex looking for a number next to \left( or a number next to a letter (which wouldnt include opperators cause of the \) or a \right)\left( which would have a mult added inbetween. Or all the other ways it could add one
    # integral would become ["int_",2, "^", 3, [5+3]dx] idk too complicated
    # \int_{2}^{3}5+3dx
    # \cos^{-1}\left(3\right) so we could also look for \cos^{-1} at the start or becuase the {} would go away just look for \cos^-1. But as usual at the start might be easier
    # \sum_{n=1}^{5+3}5n+2 I just realize sum might be a problem cause it cant solve for n so we might need some stuff for that too.
    # \sum_{n=1}^{5+3}\left(5n+2\right)+3
    # WE actualy might need to add a way for it to store the variable so "1/x" would work and we might be able to use that to reuse a equation very quickly
    # But that actualy might get insane with the summation function cause thats like simplifing
    # I also could take a function path where i turn it all into functions

    #input.split()
    #[r"5+3\cdot\frac{1}{x}\cdot",[r"frac{1}{x}"],r"\cdot\sqrt{\frac{1}{x}}\cdot"]
    #[5,"+",3,"*",[[1],"/",["x"]],"*",]


print(CalcLatex(r"8+9+\left(\left(1+2\right)\left(3+\left(4+5\right)\right)+6+7\right)+10"))
